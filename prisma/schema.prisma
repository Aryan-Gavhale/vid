generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model (Enhanced)
enum Role {
  FREELANCER
  CLIENT
  ADMIN
}

enum JobStatus {
  OPEN
  ACCEPTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum JobDifficulty {
  EASY
  INTERMEDIATE
  HARD
}

enum ProjectLength {
  SHORT_TERM
  MEDIUM_TERM
  LONG_TERM
}

enum Availability {
  FULL_TIME
  PART_TIME
  UNAVAILABLE
}

enum ExperienceLevel {
  ENTRY
  INTERMEDIATE
  EXPERT
}

model User {
  id            Int       @id @default(autoincrement())
  auth0Id       String?   @unique
  firstname     String
  lastname      String
  email         String    @unique
  password      String?
  country       String
  username      String?   @unique
  role          Role      @default(CLIENT)
  profilePicture String?
  bio           String?
  company       String?
  companyEmail  String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  isActive      Boolean   @default(true)
  isProfileComplete Boolean @default(false)
  lastNameChange DateTime?
  isVerified     Boolean   @default(false)
  totalJobs      Int      @default(0)
  totalHours     Int      @default(0)
  successRate    Float    @default(0)
  rating         Float    @default(0)
  freelancerProfile FreelancerProfile?
  ordersAsClient    Order[]           @relation("ClientOrders")
  reviewsGiven      Review[]          @relation("ReviewsByClient")
  messagesSent      Message[]         @relation("Sender")
  messagesReceived  Message[]         @relation("Receiver")
  transactions      Transaction[]
  notifications     Notification[]
  disputesRaised    Dispute[]         @relation("RaisedBy")
  jobs              Job[]             @relation("PostedBy")
  freelancerJobs    Job[]             @relation("Freelancer")
  OrderStatusHistory OrderStatusHistory[]
  Review            Review[]          @relation("ModeratedBy")
  DisputeEvidence   DisputeEvidence[]
  DisputeComment    DisputeComment[]
  Dispute           Dispute[]         @relation("ResolvedBy")
  referredReferrals Referral[]        @relation("Referrer")
  receivedReferrals Referral[]        @relation("Referee")
  Promotion         Promotion[]
  appliedJobsId     Int[]             @map("applied_jobs_id")
  applications      Application[]     @relation("FreelancerApplications")
  @@index([email])
}

model Application {
  id              Int      @id @default(autoincrement())
  jobId           Int
  freelancerId    Int
  aboutFreelancer String
  status          String   @default("PENDING") // PENDING, ACCEPTED, REJECTED
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  job             Job      @relation(fields: [jobId], references: [id])
  freelancer      User     @relation("FreelancerApplications", fields: [freelancerId], references: [id])
  @@unique([jobId, freelancerId])
  @@index([freelancerId])
}

model Milestone {
  id        Int      @id @default(autoincrement())
  jobId     Int
  name      String
  deadline  DateTime
  completed Boolean  @default(false)
  job       Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

model Job {
  id                Int            @id @default(autoincrement())
  title             String
  description       String
  category          String[]
  budgetMin         Float
  budgetMax         Float
  deadline          DateTime
  jobDifficulty     JobDifficulty
  projectLength     ProjectLength
  keyResponsibilities String[]
  requiredSkills    String[]
  tools             String[]
  scope             String
  postedById        Int            @map("posted_by_id")
  freelancerId      Int?           @map("freelancer_id")
  status            JobStatus      @default(OPEN)
  progress          Int            @default(0)
  name              String
  email             String
  company           String?
  note              String?
  videoFileUrl      String?
  rating            Float?         // For client feedback on completed jobs
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @default(now()) @updatedAt
  isVerified        Boolean        @default(false) // Require admin verification
  location          String         @default("Remote")
  proposals         Int            @default(0)
  postedBy          User           @relation("PostedBy", fields: [postedById], references: [id], onDelete: Cascade)
  freelancer        User?          @relation("Freelancer", fields: [freelancerId], references: [id], onDelete: SetNull)
  applications      Application[]
  milestones        Milestone[]    // Relation for milestones
  @@index([postedById])
  @@index([freelancerId])
  @@index([status])
}


model FreelancerProfile {
  id                Int       @id @default(autoincrement())
  userId            Int       @unique @map("user_id")
  city              String?
  state             String?
  pinCode           String?
  jobTitle          String?
  overview          String?
  skills            String[]
  languages         String[]
  socialLinks       Json?
  portfolioVideos   PortfolioVideo[]
  tools             String[]
  equipmentCameras  String?
  equipmentLenses   String?
  equipmentLighting String?
  equipmentOther    String?
  certifications    String[]  @default([])
  minimumRate       Float?
  maximumRate       Float?
  availabilityStatus Availability @default(UNAVAILABLE)
  weeklyHours       Int?
  hourlyRate        Float?
  experienceLevel   ExperienceLevel @default(ENTRY)
  totalEarnings     Float     @default(0.0)
  rating            Float     @default(0.0)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now()) @updatedAt
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userBadges        UserBadge[]
  services          Json?
  gigs              Gig[]
  orders            Order[]   @relation("FreelancerOrders")
  reviewsReceived   Review[]  @relation("ReviewsForFreelancer")
  paymentSettings   PaymentSetting[]
  freelancerSkills  FreelancerSkill[]
  software          FreelancerSoftware[]
  @@index([userId])
}
// PortfolioVideo model (Enhanced)
model PortfolioVideo {
  id           Int       @id @default(autoincrement())
  freelancerId Int       @map("freelancer_id")
  videoUrl     String
  title        String?
  description  String?
  uploadedAt   DateTime  @default(now())
  views        Int       @default(0) // New: Track views for portfolio stats
  category     String?   // New: Category for portfolio stats
  freelancer   FreelancerProfile @relation(fields: [freelancerId], references: [id], onDelete: Cascade)
}

// Gig model (Unchanged)
model Gig {
  id            Int       @id @default(autoincrement())
  freelancerId  Int       @map("freelancer_id")
  title         String
  description   String?
  category      String?
  pricing       Json // Or use GigPricing[] for typed structure
  deliveryTime  Int?
  revisionCount Int?
  status        GigStatus @default(ACTIVE)
  tags          String[]  @default([])
  requirements  String?
  thumbnailUrl  String?   // Dedicated thumbnail field
  sampleMedia   GigSampleMedia[]
  faqs          Json?     @default("[]")
  packageDetails Json?    @default("[]")
  isFeatured    Boolean   @default(false)
  views         Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt

  freelancer    FreelancerProfile @relation(fields: [freelancerId], references: [id], onDelete: Cascade)
  orders        Order[]
}

enum GigStatus {
  ACTIVE
  PAUSED
  DRAFT
  DELETED
}

model GigSampleMedia {
  id          Int       @id @default(autoincrement())
  gigId       Int       @map("gig_id")
  mediaUrl    String
  mediaType   MediaType
  title       String?
  description String?
  uploadedAt  DateTime  @default(now())

  gig         Gig       @relation(fields: [gigId], references: [id], onDelete: Cascade)
}

enum MediaType {
  VIDEO
  IMAGE
  AUDIO
  DOCUMENT
  THUMBNAIL
}

// Order model (Enhanced)
model Order {
  id                Int           @id @default(autoincrement())
  gigId             Int           @map("gig_id")
  clientId          Int           @map("client_id")
  freelancerId      Int           @map("freelancer_id")
  package           String
  totalPrice        Float
  status            OrderStatus   @default(PENDING)
  requirements      String?
  deliveryDeadline  DateTime?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @default(now()) @updatedAt
  completedAt       DateTime?
  orderNumber       String        @unique
  revisionsRequested Int          @default(0)
  revisionsCompleted Int          @default(0)
  deliveryExtensions Int          @default(0)
  extensionReason   String?
  cancellationReason String?
  cancellationDate  DateTime?
  isUrgent          Boolean       @default(false)
  priorityFee       Float?
  customDetails     Json?
  statusHistory     OrderStatusHistory[]
  progress          Int           @default(0) // New: Progress percentage (0-100)
  daysLeft          Int?          // New: Days left until deadline (calculated or stored)

  gig               Gig           @relation(fields: [gigId], references: [id], onDelete: Cascade)
  client            User          @relation("ClientOrders", fields: [clientId], references: [id])
  freelancer        FreelancerProfile @relation("FreelancerOrders", fields: [freelancerId], references: [id], onDelete: Cascade)
  transactions      Transaction[]
  review            Review?
  messages          Message[]
  dispute           Dispute?
}

model OrderStatusHistory {
  id         Int           @id @default(autoincrement())
  orderId    Int           @map("order_id")
  status     OrderStatus
  changedAt  DateTime      @default(now())
  changedBy  Int?          @map("changed_by")

  order      Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user       User?         @relation(fields: [changedBy], references: [id])
}

enum OrderStatus {
  PENDING
  ACCEPTED
  IN_PROGRESS
  DELIVERED
  COMPLETED
  CANCELLED
  DISPUTED
}

// Transaction model (Unchanged)
model Transaction {
  id             Int       @id @default(autoincrement())
  orderId        Int       @map("order_id")
  userId         Int       @map("user_id")
  amount         Float
  type           TransactionType
  paymentMethod  String?
  status         TransactionStatus @default(PENDING)
  createdAt      DateTime  @default(now())

  order          Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user           User      @relation(fields: [userId], references: [id])
  platformFee    PlatformFee?
}

enum TransactionType {
  PAYMENT
  REFUND
  PAYOUT
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

// Review model (Unchanged)
model Review {
  id            Int       @id @default(autoincrement())
  orderId       Int       @unique @map("order_id")
  clientId      Int       @map("client_id")
  freelancerId  Int       @map("freelancer_id")
  rating        Int
  comment       String?
  title         String?
  isAnonymous   Boolean   @default(false)
  helpfulCount  Int       @default(0)
  response      String?
  respondedAt   DateTime?
  isVerified    Boolean   @default(true)
  moderationStatus ModerationStatus @default(APPROVED)
  moderatedAt   DateTime?
  moderatedBy   Int?      @map("moderated_by")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt

  order         Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  client        User      @relation("ReviewsByClient", fields: [clientId], references: [id])
  freelancer    FreelancerProfile @relation("ReviewsForFreelancer", fields: [freelancerId], references: [id], onDelete: Cascade)
  moderator     User?     @relation("ModeratedBy", fields: [moderatedBy], references: [id])
}

enum ModerationStatus {
  PENDING
  APPROVED
  REJECTED
}

// Message model (Unchanged)
model Message {
  id            Int       @id @default(autoincrement())
  senderId      Int       @map("sender_id")
  receiverId    Int       @map("receiver_id")
  orderId       Int?      @map("order_id")
  content       String
  subject       String?
  isRead        Boolean   @default(false)
  isFlagged     Boolean   @default(false)
  flaggedReason String?
  parentId      Int?      @map("parent_id")
  attachments   MessageAttachment[]
  sentAt        DateTime  @default(now())
  readAt        DateTime?
  deletedAt     DateTime?

  sender        User      @relation("Sender", fields: [senderId], references: [id])
  receiver      User      @relation("Receiver", fields: [receiverId], references: [id])
  order         Order?    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  parent        Message?  @relation("Replies", fields: [parentId], references: [id])
  replies       Message[] @relation("Replies")
}

model MessageAttachment {
  id          Int       @id @default(autoincrement())
  messageId   Int       @map("message_id")
  fileUrl     String
  fileType    String
  fileName    String?
  uploadedAt  DateTime  @default(now())

  message     Message   @relation(fields: [messageId], references: [id], onDelete: Cascade)
}

// Category model (Unchanged)
model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  parentId    Int?      @map("parent_id")

  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
}

// Skill model (Unchanged)
model Skill {
  id         Int       @id @default(autoincrement())
  name       String    @unique

  freelancers FreelancerSkill[]
}

// FreelancerSkill model (Unchanged)
model FreelancerSkill {
  freelancerId Int @map("freelancer_id")
  skillId      Int @map("skill_id")

  freelancer   FreelancerProfile @relation(fields: [freelancerId], references: [id], onDelete: Cascade)
  skill        Skill            @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@id([freelancerId, skillId])
}

// New: FreelancerSoftware model
model FreelancerSoftware {
  id           Int       @id @default(autoincrement())
  freelancerId Int       @map("freelancer_id")
  name         String    // e.g., "Adobe Premiere Pro"
  icon         String    // e.g., "Pr"
  level        Int       // Proficiency level (0-100)

  freelancer   FreelancerProfile @relation(fields: [freelancerId], references: [id], onDelete: Cascade)
}

// Notification model (Unchanged)
model Notification {
  id            Int       @id @default(autoincrement())
  userId        Int       @map("user_id")
  type          NotificationType
  content       String
  entityType    String?
  entityId      Int?
  priority      Priority  @default(NORMAL)
  isRead        Boolean   @default(false)
  readAt        DateTime?
  expiresAt     DateTime?
  metadata      Json?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt

  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum NotificationType {
  ORDER_UPDATE
  MESSAGE
  PAYMENT
  REVIEW
  DISPUTE
  SYSTEM
}

enum Priority {
  LOW
  NORMAL
  HIGH
}

// Dispute model (Unchanged)
model Dispute {
  id            Int       @id @default(autoincrement())
  orderId       Int       @unique @map("order_id")
  raisedById    Int       @map("raised_by_id")
  reason        String
  description   String?
  status        DisputeStatus @default(OPEN)
  resolution    String?
  resolvedAt    DateTime?
  resolvedBy    Int?      @map("resolved_by")
  evidence      DisputeEvidence[]
  comments      DisputeComment[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt

  order         Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  raisedBy      User      @relation("RaisedBy", fields: [raisedById], references: [id])
  resolver      User?     @relation("ResolvedBy", fields: [resolvedBy], references: [id])
}

model DisputeEvidence {
  id         Int       @id @default(autoincrement())
  disputeId  Int       @map("dispute_id")
  fileUrl    String
  fileType   String
  fileName   String?
  uploadedBy Int       @map("uploaded_by")
  uploadedAt DateTime  @default(now())

  dispute    Dispute   @relation(fields: [disputeId], references: [id], onDelete: Cascade)
  uploader   User      @relation(fields: [uploadedBy], references: [id])
}

model DisputeComment {
  id         Int       @id @default(autoincrement())
  disputeId  Int       @map("dispute_id")
  userId     Int       @map("user_id")
  content    String
  createdAt  DateTime  @default(now())

  dispute    Dispute   @relation(fields: [disputeId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id])
}

enum DisputeStatus {
  OPEN
  IN_REVIEW
  RESOLVED
  CLOSED
}

// PaymentSetting model (Unchanged)
model PaymentSetting {
  id         Int       @id @default(autoincrement())
  freelancerId Int     @map("freelancer_id")
  method     String
  details    Json
  isVerified Boolean   @default(false)

  freelancer FreelancerProfile @relation(fields: [freelancerId], references: [id], onDelete: Cascade)
}

// PlatformFee model (Unchanged)
model PlatformFee {
  id            Int       @id @default(autoincrement())
  transactionId Int       @unique @map("transaction_id")
  amount        Float
  percentage    Float
  createdAt     DateTime  @default(now())

  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
}

// Referral model (Unchanged)
model Referral {
  id            Int       @id @default(autoincrement())
  referrerId    Int       @map("referrer_id")
  refereeId     Int?      @unique @map("referee_id")
  referralCode  String    @unique
  status        ReferralStatus @default(PENDING)
  rewardAmount  Float?
  createdAt     DateTime  @default(now())
  redeemedAt    DateTime?

  referrer      User      @relation("Referrer", fields: [referrerId], references: [id])
  referee       User?     @relation("Referee", fields: [refereeId], references: [id])
}

enum ReferralStatus {
  PENDING
  REDEEMED
  EXPIRED
}

// Promotion model (Unchanged)
model Promotion {
  id            Int       @id @default(autoincrement())
  type          PromotionType
  code          String?   @unique
  entityType    String?
  entityId      Int?
  discountAmount Float?
  discountType  DiscountType?
  userId        Int?      @map("user_id")
  status        PromotionStatus @default(ACTIVE)
  maxUses       Int?
  uses          Int       @default(0)
  createdAt     DateTime  @default(now())
  expiresAt     DateTime?

  user          User?     @relation(fields: [userId], references: [id])
}

enum PromotionType {
  PROMO_CODE
  FEATURED_LISTING
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

enum PromotionStatus {
  ACTIVE
  EXPIRED
  DISABLED
}

model Badge {
  id          String    @id @default(uuid())
  name        String    @unique
  icon        String
  color       String
  description String
  userBadges  UserBadge[]
}

model UserBadge {
  id           String          @id @default(uuid())
  freelancerId Int
  badgeId      String
  earnedAt     DateTime        @default(now())
  isVisible    Boolean         @default(true)
  freelancer   FreelancerProfile @relation(fields: [freelancerId], references: [id])
  badge        Badge           @relation(fields: [badgeId], references: [id])
}

enum SubmissionStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CLOSED
}

// Enum for issue category
enum IssueCategory {
  TECHNICAL
  BILLING
  ACCOUNT
  FEATURE
  OTHER
}

// Enum for priority level
enum PriorityLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

// Enum for contact method
enum ContactMethod {
  EMAIL
  PHONE
  ANY
}

model ContactSubmission {
  id              String          @id @default(uuid())
  firstName       String
  lastName        String
  email           String          @db.VarChar(255)
  phone           String?         @db.VarChar(20)
  category        IssueCategory   @default(OTHER)
  subject         String          @db.VarChar(255)
  message         String          @db.Text
  priority        PriorityLevel   @default(MEDIUM)
  contactMethod   ContactMethod   @default(EMAIL)
  status          SubmissionStatus @default(PENDING)
  isResolved      Boolean         @default(false)
  assignedAdminId String?         @db.VarChar(36) // UUID of admin, nullable
  resolutionNotes String?         @db.Text // Notes on how the issue was resolved
  lastActionAt    DateTime?       // Tracks last update or interaction
  files           ContactFile[]   // Relation to uploaded files
  createdBy       String?         @db.VarChar(36) // Optional: user ID who submitted (for logged-in users)
  updatedBy       String?         @db.VarChar(36) // Optional: admin/user who last updated
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Indexes for faster queries
  @@index([email])
  @@index([status])
  @@index([priority])
  @@index([assignedAdminId])
  @@index([createdAt])
}

model ContactFile {
  id                  String          @id @default(uuid())
  contactSubmission   ContactSubmission @relation(fields: [contactSubmissionId], references: [id], onDelete: Cascade)
  contactSubmissionId String          @db.VarChar(36)
  fileName            String?         @db.VarChar(255) // Original file name for reference
  fileUrl             String          @db.VarChar(512) // URL to the uploaded file
  fileType            String          @db.VarChar(100) // e.g., "image/jpeg"
  fileSize            Int             // Size in bytes
  description         String?         @db.Text         // Optional context (e.g., "Screenshot of error")
  createdAt           DateTime        @default(now())

  // Indexes for faster queries
  @@index([contactSubmissionId])
}